IO/primitives
- No types for now (many complications!)
- u64, u64 math, "match" works on u64 as well as channels
- IO can be done with channels that read/write u64
  - e.g. cat = !stdin(c).stdout<c>.0
    - send/recv never inspect the values so it's fine
    - stdin/stdout will correctly format their results/inputs

Compilation
- FV for liveness analysis
- Register allocation using global register variables
- Spill into C locals
- gt_go_alloca(void f(void), size_t m, size_t n)
  - Use to pass spilled free variables on to forked processes
  - Max stack size n
  - Local stack size m for initial stack frame of f i.e. initial stack is
      &f
      .
      .   m bytes
      .
      &gt_stop
  - f must (add $m, %rsp) before ret

Liveness
- Before using FV as liveness function, want to make it a bit more precise
  - e.g. new x, new y, send x to z, send y to z, halt
    - FV(send x to z, send y to z, halt) = {x, y, z} ==> x, y, z interfere with each other
    - But ideally, x and y should get the same register
- Solution: float new down to the most precise location
  - x not in FV(P) ==> new x, P ~~> P ("dead variable elimination")
  - new x, new y, P ~~> new y, new x, P
  - x not in {y, z} ==> new x, send y to z, P ~~> send y to z, new x, P
  - x != z ==> new x, read y from z, P ~~> read y from z, new x, P (x != y by UB)
  - x not in FV(P) ==> new x, P | Q ~~> P | (new x, Q)
  - x not in FV(Q) ==> new x, P | Q ~~> (new x, P) | Q
  - new x, P + Q ~~> (new x, P) + (new x, Q)
  - x not in {y, z1, .., zn} ==>
    new x, match y {z1 -> P1; ..; zn -> Pn} ~~>
    match y {z1 -> new x, P1; ..; zn -> new x, Pn}
- In some cases, new x, loop P ~~> loop new x, P
  - Depends if new x, P can rewrite to something a lot more favorable

Register allocation 
- Slightly different from usual allocation, because the cost of spilling is different.
- "Spilling" just means the variable becomes a C variable instead of a global register
  variable. So a spilled variable will probably still get put into a register and doesn't
  necessarily cost more to work with.
- The cost of spilled variables is that they have to be manually shuttled across forks:
  - e.g. suppose {x spills, y in rbx} in new x, P | send x to y
  - Then this compiles to
      void f(void) {
        void *rsp = gt_self()->rsp;
        send(rbx, ((gt_t *)rsp)[0]);
        asm("add 16, %%rsp\t\n" : : : "rsp");
      }
           .
           .
           .
      gt_ch x = gt_chan();
      gt_t q = gt_go_alloca(f, 16, MAX_STACK_SIZE);
      ((gt_ch *)q->rsp)[1] = x; // spilled x
      q->rbx = rbx;
      rest of P
  - Now suppose {x in r12, y in rbx} in new x, P | send x to y
  - Then this compiles to
      void f(void) { send(rbx, r12); }
           .
           .
           .
      rbx = gt_chan();
      gt_go(f, MAX_STACK_SIZE);
      q->rbx = rbx;
      q->r12 = r12;
      rest of P

Register allocation for P with variables x₁ .. xₙ
- Registers R represented as natural numbers
- Sort x₁ .. xₙ in increasing order of spillability to get y₁ .. yₙ
- Find largest i s.t. F(i) SAT and assign y₁ .. yᵢ accordingly, where
  - F(i) = C ∧ /\ y ∈ R for y in y₁ .. yᵢ
  - C = /\ distinct(FV(P')) for each subprocess P' of P
- Find smallest j s.t. G(j) SAT and assign yᵢ₊₁ .. yₙ accordingly, where
  - G(j) = C ∧ /\ y ∈ {1 .. j} for y in yᵢ₊₁ .. yₙ

Computing spillability of a variable x if there are no loops or matches:
- Spillability is just 0 - the expected number of forks that happen in x's lifetime
- forks(x, 0)
  || forks(x, "new _, P")
  || forks(x, "read _ from _, P")
  || forks(x, "send _ to _, P") = forks(x, P)
- forks(x, P | Q) = (x in FV(Q)) + forks(x, P) + forks(x, Q)
- forks(x, P + Q) = 1/2 forks(x, P) + 1/2 forks(x, Q)

Spillability of x if there are loops (but not matches):
- Loops "run forever" but could technically "wait forever" because reads/writes wait
- For now, simple heuristic: forks(x, loop P) = k forks(x, P) for some big k
  - Assume loops fork much more than non-loops
  - Assume n > m ==> loop with n forks always worse than loop with m forks

Spillability of x if there are matches:
- Unlike (+), matches probably won't choose subprocesses uniformly at random
- For now, simple heuristic:
  - forks(x, match y {_ -> P₁; ..; _ -> Pₙ}) = max forks(x, Pᵢ) for i in {1 .. n}
  - Always assume the worst

